I"Ô]<h2 id="advanced-analysis-and-visualization">Advanced analysis and visualization</h2>

<p>The purpose of this part:</p>

<p><strong>further analysis and visualization of the significant drivers</strong>.</p>

<p>One ‚Äúlazy mode‚Äù function without flexiable options is available for this part of analysis: <code class="highlighter-rouge">NetBID.lazyMode.DriverVisualization()</code>. 
User could check the manual for this function and try the demo code for usage.</p>

<p>The complete step-by-step demo script for result visualization can be found here, <a href="https://github.com/jyyulab/NetBID-dev/blob/master/demo_scripts/analysis_and_plot_demo1.R">analysis_and_plot_demo1.R</a>.</p>

<p>From the demo dataset, we‚Äôve found the significant hidden drivers in Group4 compared to other subtype groups. These drivers may relate to specific clinical features of the adult medulloblastoma Group4, and hence the further investigation is needed. 
Here, we‚Äôve listed some important biological questions which can be further investigated using NetBID2.</p>

<hr />

<h2 id="quick-navigation-for-this-page">Quick Navigation for this page</h2>

<ul>
  <li><a href="#preparations">Preparations</a></li>
  <li><a href="#part-i-more-details-about-the-top-drivers">Part I: More details about the top drivers</a>
    <ul>
      <li><a href="#qi1-how-to-get-the-top-drivers-with-significant-differential-activity-da-in-the-comparison-between-g4-vs-other-subtypes-">QI.1: How to get the top drivers with significant differential activity (DA) in the comparison between G4 vs. other subtypes ?</a></li>
      <li><a href="#qi2-how-to-interpret-the-significance-of-top-da-drivers-">QI.2: How to interpret the significance of top DA drivers ?</a></li>
      <li><a href="#qi3-what-is-the-expressionactivity-pattern-of-these-top-da-drivers-across-sample-subtypes">QI.3: What is the expression/activity pattern of these top DA drivers across sample subtypes?</a></li>
      <li><a href="#qi4-what-are-the-biological-functions-of-these-top-da-drivers-">QI.4: What are the biological functions of these top DA drivers ?</a></li>
      <li><a href="#qi5-what-are-the-biological-functions-of-the-target-genes-of-these-top-da-drivers-">QI.5: What are the biological functions of the target genes of these top DA drivers ?</a></li>
    </ul>
  </li>
  <li><a href="#part-ii-more-details-about-the-selected-driver">Part II: More details about the selected driver</a>
    <ul>
      <li><a href="#qii1-how-to-interpret-the-significance-of-the-selected-driver-">QII.1: How to interpret the significance of the selected driver ?</a></li>
      <li><a href="#qii2-how-to-visualize-the-network-structure-of-the-selected-driver-">QII.2: How to visualize the network structure of the selected driver ?</a></li>
      <li><a href="#qii3-what-is-the-expressionactivity-of-this-selected-driver-across-subtypes-of-sample">QII.3: What is the expression/activity of this selected driver across subtypes of sample ?</a></li>
      <li><a href="#qii4-what-are-the-functions-of-the-target-genes-of-this-selected-driver-">QII.4: What are the functions of the target genes of this selected driver ?</a></li>
    </ul>
  </li>
  <li><a href="#part-iii-other-analyses-netbid2-can-do">Part III: Other analyses NetBID2 can do</a>
    <ul>
      <li><a href="#qiii1-what-are-the-activities-of-the-curated-gene-sets-across-all-samples">QIII.1: What are the activities of the curated gene sets across all samples ?</a></li>
      <li><a href="#qiii2-how-to-find-drivers-share-significantly-overlapped-target-genes-">QIII.2: How to find drivers share significantly overlapped target genes ?</a>
        <ul>
          <li><a href="#how-to-modify-the-figure-size-created-by-draw-functions-">Q&amp;A: How to modify the figure size created by <code class="highlighter-rouge">draw.</code> functions ?</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="preparations">Preparations</h2>

<p>Make sure you have NetBID2 package.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">NetBID2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Reload previous saved RData from <code class="highlighter-rouge">ms-tab</code> step. Here, we use the demo data from NetBID2 package.
Users can call <code class="highlighter-rouge">analysis.par$out.dir.PLOT</code> to see where the plots created by later pipeline will be saved, this can be modified.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Give file path to reload `ms-tab` RData from driver inference step</span><span class="w">
</span><span class="n">analysis.par</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">()</span><span class="w">
</span><span class="c1"># Here we use demo data from NetBID2 package</span><span class="w">
</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.DATA</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">system.file</span><span class="p">(</span><span class="s1">'demo1'</span><span class="p">,</span><span class="s1">'driver/DATA/'</span><span class="p">,</span><span class="n">package</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"NetBID2"</span><span class="p">)</span><span class="w">
</span><span class="n">NetBID.loadRData</span><span class="p">(</span><span class="n">analysis.par</span><span class="o">=</span><span class="n">analysis.par</span><span class="p">,</span><span class="n">step</span><span class="o">=</span><span class="s1">'ms-tab'</span><span class="p">)</span><span class="w">
</span><span class="c1"># To see where the plots created later will be saved</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">)</span><span class="w">
</span><span class="c1">#analysis.par$out.dir.PLOT &lt;- 'test/driver/PLOT' # Users can modify this path</span><span class="w">
</span></code></pre></div></div>

<h2 id="part-i-more-details-about-the-top-drivers">Part I: More details about the top drivers</h2>

<h3 id="qi1-how-to-get-the-top-drivers-with-significant-differential-activity-da-in-the-comparison-between-g4-vs-other-subtypes-">QI.1: How to get the top drivers with significant differential activity (DA) in the comparison between G4 vs. other subtypes ?</h3>

<p>First, retrive the master table element from the <code class="highlighter-rouge">analysis.par</code> super list, and pass it to a new variable <code class="highlighter-rouge">ms_tab</code>. 
Filter out drivers with target size too small (e.g. &lt;30) and too big (e.g. &gt;1000).
Define the comparison name <code class="highlighter-rouge">comp_name</code> as <code class="highlighter-rouge">G4.Vs.others</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ms_tab</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analysis.par</span><span class="o">$</span><span class="n">final_ms_tab</span><span class="w"> </span><span class="c1">## get the master table data frame</span><span class="w">
</span><span class="n">ms_tab</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ms_tab</span><span class="p">[</span><span class="n">which</span><span class="p">(</span><span class="n">ms_tab</span><span class="o">$</span><span class="n">Size</span><span class="o">&gt;=</span><span class="m">30</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">ms_tab</span><span class="o">$</span><span class="n">Size</span><span class="w"> </span><span class="o">&lt;=</span><span class="m">1000</span><span class="p">),]</span><span class="w"> 
</span><span class="n">comp_name</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'G4.Vs.others'</span><span class="w"> </span><span class="c1">## get the comparison name</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>To quickly identify top DA drivers from large dataset, NetBID2 uses the volcano plot <code class="highlighter-rouge">draw.volcanoPlot()</code>. In this special scatter-plot, the y axis shows the significance of DA driver, the x axis shos the fold-change.</li>
</ul>

<p>More handlers of <code class="highlighter-rouge">draw.volcanoPlot()</code>:</p>

<ul>
  <li>Input data frame must contain columns of <code class="highlighter-rouge">label_col</code>, <code class="highlighter-rouge">logFC_col</code> and <code class="highlighter-rouge">Pv_col</code>.</li>
  <li>To set thresholds, please use <code class="highlighter-rouge">logFC_thre</code> (for logFC) and <code class="highlighter-rouge">Pv_thre</code> (for P-value).</li>
  <li>To turn off figure display, only return the top driver list, please set <code class="highlighter-rouge">show_plot=FALSE</code>.</li>
  <li>To show driver labels that passed the threshold only, please set <code class="highlighter-rouge">show_label=TRUE</code>.</li>
  <li>If one set <code class="highlighter-rouge">std=TRUE</code> to <code class="highlighter-rouge">cal.Activity()</code>, the threshold of logFC of the activity value should not be set very high.</li>
</ul>

<p>The figure below is to show the top DA drivers passed the thresholds of logFC‚â•0.4 and P-value‚â§1e-8.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sig_driver</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">draw.volcanoPlot</span><span class="p">(</span><span class="n">dat</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">,</span><span class="n">label_col</span><span class="o">=</span><span class="s1">'gene_label'</span><span class="p">,</span><span class="n">logFC_col</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'logFC.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">),</span><span class="w">
                               </span><span class="n">Pv_col</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'P.Value.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">),</span><span class="n">logFC_thre</span><span class="o">=</span><span class="m">0.4</span><span class="p">,</span><span class="n">Pv_thre</span><span class="o">=</span><span class="m">1e-8</span><span class="p">,</span><span class="w">
                               </span><span class="n">main</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Volcano Plot for %s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">),</span><span class="n">show_label</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="w">
                               </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/vocalno_label_DA.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="n">label_cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="vocalno_label_DA.png" alt="vocalno_label_DA" /></p>

<ul>
  <li><code class="highlighter-rouge">draw.volcanoPlot()</code> is also applicable visualize the top DE genes. The figure below are top genes with DE passed thresholds of  logFC‚â•1.5 and P-value‚â§1e-4.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sig_gene</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">draw.volcanoPlot</span><span class="p">(</span><span class="n">dat</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">,</span><span class="n">label_col</span><span class="o">=</span><span class="s1">'geneSymbol'</span><span class="p">,</span><span class="n">logFC_col</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'logFC.%s_DE'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">),</span><span class="w">
                             </span><span class="n">Pv_col</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'P.Value.%s_DE'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">),</span><span class="n">logFC_thre</span><span class="o">=</span><span class="m">1.5</span><span class="p">,</span><span class="n">Pv_thre</span><span class="o">=</span><span class="m">1e-4</span><span class="p">,</span><span class="w">
                             </span><span class="n">main</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Volcano Plot for %s_DE'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">),</span><span class="n">show_label</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="w">
                             </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/vocalno_label_DE.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="n">label_cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="vocalno_label_DE.png" alt="vocalno_label_DE" /></p>

<ul>
  <li>The returned <code class="highlighter-rouge">sig_driver</code> and <code class="highlighter-rouge">sig_gene</code> are the data frames containing drivers and genes that passed the thresholds.</li>
</ul>

<h3 id="qi2-how-to-interpret-the-significance-of-top-da-drivers-">QI.2: How to interpret the significance of top DA drivers ?</h3>

<p>A driver‚Äôs activity is evaluated from the expression pattern of its target genes. Due to this, if a driver‚Äôs activity value is significantly up-regulated in G4 compared to other subtypes, it can be caused by two ways: (a) its positively-regulated target genes have significantly upregulation in G4 compared to others; (b) its negatively-regulated target genes have significantly downregulation in G4 compared to others.</p>

<p><code class="highlighter-rouge">draw.GSEA.NetBID()</code> helps users to interpret the significance of these top DA drivers from the expression and regulation of their target genes.</p>

<p>First, get the differential expression (DE) data frame of the target genes from the comparison between Group4 vs. others.
Here, we need to pay attention to the gene ID type. The ID type should be the <code class="highlighter-rouge">originalID_label</code> column from the master table. The same ID type we used to draw the volcano plot.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get the DE data frame of target genes</span><span class="w">
</span><span class="n">DE</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analysis.par</span><span class="o">$</span><span class="n">DE</span><span class="p">[[</span><span class="n">comp_name</span><span class="p">]]</span><span class="w">
</span><span class="n">driver_list</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">sig_driver</span><span class="p">)</span><span class="w"> </span><span class="c1"># The rownames is the originalID_label</span><span class="w">
</span></code></pre></div></div>

<p>The following 5 figures are showing the same content. The purpose is to list various visualizations that <code class="highlighter-rouge">draw.GSEA.NetBID()</code> can provide.
The key handlers are <code class="highlighter-rouge">profile_trend</code>, <code class="highlighter-rouge">profile_col</code>, <code class="highlighter-rouge">target_nrow</code>, <code class="highlighter-rouge">target_col</code> and <code class="highlighter-rouge">target_col_type</code>.</p>

<ul>
  <li>In the first demo plot below, 
the top figure is a metric for the ranking of genes based on their <code class="highlighter-rouge">logFC</code> values (<code class="highlighter-rouge">profile_col</code>). The order of ranking is from negative values to positive values (<code class="highlighter-rouge">profile_trend='neg2pos'</code>). The bottom figure has three parts: on the left is a horizontal barplot showing the target size of up-regulated and down-regulated genes for each driver; in the middle are panels marking each target gene‚Äôs ranking position (panel number for each driver can be 1 or 2, here <code class="highlighter-rouge">target_nrow=2</code>), and the name of the color palette used for display target genes marker lines is <code class="highlighter-rouge">target_col_type='DE'</code>; on the right is the DA and DE values for each driver (using threhold <code class="highlighter-rouge">profile_sig_thre</code>, blue is negative, red is positive).</li>
</ul>

<p>From the figure below, we can see the positively-regulated target genes of the <em>down</em> DA drivers tend to have lower logFC expression values in G4 compared to other subtypes. For the <em>up</em> DA drivers, it shows the opposite. For example, GALNT4_SIG driver has a significantly negative activity value in G4 compared to other subtypes (marked in blue, P-value is 1e-09). It has around 160 positively-regulated target genes (orange bar on the left), and most of their logFC are negative values with high rankings (first panel with blue and grey marker lines). It means these positively-regulated target genes have significant negative logFC values in G4 compared to other subtypes. Vice versa for the negatively-regulated target genes. These two expression patterns of target genes contribute to their driver‚Äôs DA value.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.GSEA.NetBID</span><span class="p">(</span><span class="n">DE</span><span class="o">=</span><span class="n">DE</span><span class="p">,</span><span class="n">profile_col</span><span class="o">=</span><span class="s1">'logFC'</span><span class="p">,</span><span class="n">profile_trend</span><span class="o">=</span><span class="s1">'neg2pos'</span><span class="p">,</span><span class="n">name_col</span><span class="o">=</span><span class="s1">'ID'</span><span class="p">,</span><span class="w">
                 </span><span class="n">driver_list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">driver_list</span><span class="p">,</span><span class="w">
                 </span><span class="n">show_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="w">
                 </span><span class="n">driver_DA_Z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                 </span><span class="n">driver_DE_Z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DE'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                 </span><span class="n">target_list</span><span class="o">=</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">,</span><span class="w">
                 </span><span class="n">top_driver_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">target_nrow</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="n">target_col</span><span class="o">=</span><span class="s1">'RdBu'</span><span class="p">,</span><span class="w">
                 </span><span class="n">left_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in others'</span><span class="p">,</span><span class="n">right_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in G4'</span><span class="p">,</span><span class="w">
                 </span><span class="n">main</span><span class="o">=</span><span class="n">comp_name</span><span class="p">,</span><span class="n">target_col_type</span><span class="o">=</span><span class="s1">'DE'</span><span class="p">,</span><span class="n">Z_sig_thre</span><span class="o">=</span><span class="m">1.64</span><span class="p">,</span><span class="n">profile_sig_thre</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.64</span><span class="p">,</span><span class="w">
                 </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/NetBID_GSEA_demo1.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="NetBID_GSEA_demo1.png" alt="NetBID_GSEA_demo1" /></p>

<ul>
  <li>In the second demo plot below, the top figure is a metric for the ranking of genes based on their <code class="highlighter-rouge">t</code> values (<code class="highlighter-rouge">profile_col</code>). The order of ranking is from positive values to negative values (<code class="highlighter-rouge">profile_trend='pos2neg'</code>). The name of the color palette used for display target genes marker lines is <code class="highlighter-rouge">target_col_type='PN'</code>.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.GSEA.NetBID</span><span class="p">(</span><span class="n">DE</span><span class="o">=</span><span class="n">DE</span><span class="p">,</span><span class="n">profile_col</span><span class="o">=</span><span class="s1">'t'</span><span class="p">,</span><span class="n">profile_trend</span><span class="o">=</span><span class="s1">'pos2neg'</span><span class="p">,</span><span class="w">
                 </span><span class="n">driver_list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">driver_list</span><span class="p">,</span><span class="w">
                 </span><span class="n">show_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="w">
                 </span><span class="n">driver_DA_Z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                 </span><span class="n">driver_DE_Z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DE'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                 </span><span class="n">target_list</span><span class="o">=</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">,</span><span class="w">
                 </span><span class="n">top_driver_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">target_nrow</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="n">target_col</span><span class="o">=</span><span class="s1">'RdBu'</span><span class="p">,</span><span class="w">
                 </span><span class="n">left_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in G4'</span><span class="p">,</span><span class="n">right_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in others'</span><span class="p">,</span><span class="w">
                 </span><span class="n">main</span><span class="o">=</span><span class="n">comp_name</span><span class="p">,</span><span class="n">target_col_type</span><span class="o">=</span><span class="s1">'PN'</span><span class="p">,</span><span class="n">Z_sig_thre</span><span class="o">=</span><span class="m">1.64</span><span class="p">,</span><span class="n">profile_sig_thre</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.64</span><span class="p">,</span><span class="w">
                 </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/NetBID_GSEA_demo2.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="NetBID_GSEA_demo2.png" alt="NetBID_GSEA_demo2" /></p>

<ul>
  <li>In the third demo plot below, the color used to mark those target genes is black (<code class="highlighter-rouge">target_col='black'</code>).</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.GSEA.NetBID</span><span class="p">(</span><span class="n">DE</span><span class="o">=</span><span class="n">DE</span><span class="p">,</span><span class="n">profile_col</span><span class="o">=</span><span class="s1">'t'</span><span class="p">,</span><span class="n">profile_trend</span><span class="o">=</span><span class="s1">'pos2neg'</span><span class="p">,</span><span class="w">
                 </span><span class="n">driver_list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">driver_list</span><span class="p">,</span><span class="w">
                 </span><span class="n">show_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="w">
                 </span><span class="n">driver_DA_Z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                 </span><span class="n">driver_DE_Z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DE'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                 </span><span class="n">target_list</span><span class="o">=</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">,</span><span class="w">
                 </span><span class="n">top_driver_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">target_nrow</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="n">target_col</span><span class="o">=</span><span class="s1">'black'</span><span class="p">,</span><span class="w">
                 </span><span class="n">left_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in G4'</span><span class="p">,</span><span class="n">right_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in others'</span><span class="p">,</span><span class="w">
                 </span><span class="n">main</span><span class="o">=</span><span class="n">comp_name</span><span class="p">,</span><span class="n">target_col_type</span><span class="o">=</span><span class="s1">'PN'</span><span class="p">,</span><span class="n">Z_sig_thre</span><span class="o">=</span><span class="m">1.64</span><span class="p">,</span><span class="n">profile_sig_thre</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.64</span><span class="p">,</span><span class="w">
                 </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/NetBID_GSEA_demo3.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="NetBID_GSEA_demo3.png" alt="NetBID_GSEA_demo3" /></p>

<ul>
  <li>In the forth demo plot below, the number of panels to mark each target gene‚Äôs ranking position is 1, <code class="highlighter-rouge">target_nrow=1</code>. User can set <code class="highlighter-rouge">target_col='RdBu'</code> and <code class="highlighter-rouge">target_col_type='DE'</code> to distinguish positively-regulated target genes from negatively-regulated target genes.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.GSEA.NetBID</span><span class="p">(</span><span class="n">DE</span><span class="o">=</span><span class="n">DE</span><span class="p">,</span><span class="n">profile_col</span><span class="o">=</span><span class="s1">'t'</span><span class="p">,</span><span class="n">profile_trend</span><span class="o">=</span><span class="s1">'pos2neg'</span><span class="p">,</span><span class="w">
                 </span><span class="n">driver_list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">driver_list</span><span class="p">,</span><span class="w">
                 </span><span class="n">show_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="w">
                 </span><span class="n">driver_DA_Z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                 </span><span class="n">driver_DE_Z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DE'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                 </span><span class="n">target_list</span><span class="o">=</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">,</span><span class="w">
                 </span><span class="n">top_driver_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">target_nrow</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="n">target_col</span><span class="o">=</span><span class="s1">'RdBu'</span><span class="p">,</span><span class="w">
                 </span><span class="n">left_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in G4'</span><span class="p">,</span><span class="n">right_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in others'</span><span class="p">,</span><span class="w">
                 </span><span class="n">main</span><span class="o">=</span><span class="n">comp_name</span><span class="p">,</span><span class="n">target_col_type</span><span class="o">=</span><span class="s1">'DE'</span><span class="p">,</span><span class="n">Z_sig_thre</span><span class="o">=</span><span class="m">1.64</span><span class="p">,</span><span class="n">profile_sig_thre</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.64</span><span class="p">,</span><span class="w">
                 </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/NetBID_GSEA_demo4.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="NetBID_GSEA_demo4.png" alt="NetBID_GSEA_demo4" /></p>

<ul>
  <li>In the fifth demo plot below,  the number of panels to mark each target gene‚Äôs ranking position is 1, <code class="highlighter-rouge">target_nrow=1</code>. And all the target genes marker lines are black, <code class="highlighter-rouge">target_col='black'</code>.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.GSEA.NetBID</span><span class="p">(</span><span class="n">DE</span><span class="o">=</span><span class="n">DE</span><span class="p">,</span><span class="n">profile_col</span><span class="o">=</span><span class="s1">'t'</span><span class="p">,</span><span class="n">profile_trend</span><span class="o">=</span><span class="s1">'pos2neg'</span><span class="p">,</span><span class="w">
                 </span><span class="n">driver_list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">driver_list</span><span class="p">,</span><span class="w">
                 </span><span class="n">show_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="w">
                 </span><span class="n">driver_DA_Z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                 </span><span class="n">driver_DE_Z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DE'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                 </span><span class="n">target_list</span><span class="o">=</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">,</span><span class="w">
                 </span><span class="n">top_driver_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">target_nrow</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="n">target_col</span><span class="o">=</span><span class="s1">'black'</span><span class="p">,</span><span class="w">
                 </span><span class="n">left_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in G4'</span><span class="p">,</span><span class="n">right_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in others'</span><span class="p">,</span><span class="w">
                 </span><span class="n">main</span><span class="o">=</span><span class="n">comp_name</span><span class="p">,</span><span class="n">target_col_type</span><span class="o">=</span><span class="s1">'PN'</span><span class="p">,</span><span class="n">Z_sig_thre</span><span class="o">=</span><span class="m">1.64</span><span class="p">,</span><span class="n">profile_sig_thre</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.64</span><span class="p">,</span><span class="w">
                 </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/NetBID_GSEA_demo5.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="NetBID_GSEA_demo5.png" alt="NetBID_GSEA_demo5" /></p>

<h3 id="qi3-what-is-the-expressionactivity-pattern-of-these-top-da-drivers-across-sample-subtypes">QI.3: What is the expression/activity pattern of these top DA drivers across sample subtypes?</h3>

<p>Next, we‚Äôd like to know the expression/activity pattern of these top DA drivers from different sample subtypes.
In NetBID2, <code class="highlighter-rouge">draw.heatmap()</code> is designed to assist this using user-friendly heatmap. It is based on <code class="highlighter-rouge">Heatmap()</code> function in <a href="https://bioconductor.org/packages/release/bioc/html/ComplexHeatmap.html">ComplexHeatmap</a>.</p>

<p>First, please get the expression matrix <code class="highlighter-rouge">exp_mat</code>, the activity matrix <code class="highlighter-rouge">ac_mat</code> and the phenotype data frame <code class="highlighter-rouge">phe_info</code> from <code class="highlighter-rouge">analysis.par</code> super list.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">exp_mat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">exprs</span><span class="p">(</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">cal.eset</span><span class="p">)</span><span class="w"> </span><span class="c1"># expression matrix, the rownames must be the originalID</span><span class="w">
</span><span class="n">ac_mat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">exprs</span><span class="p">(</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.ac.eset</span><span class="p">)</span><span class="w"> </span><span class="c1"># activity matrix, the rownames must be the originalID_label</span><span class="w">
</span><span class="n">phe_info</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pData</span><span class="p">(</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">cal.eset</span><span class="p">)</span><span class="w"> </span><span class="c1"># phenotype data frame</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Draw the heatmap using expression value of top DA drivers (scaled by samples <code class="highlighter-rouge">scale='row'</code>). 
Here, the <code class="highlighter-rouge">use_genes</code> must be the <code class="highlighter-rouge">originalID</code>. Here, we displayed all the phenotype columns: gender, pathology, subgroup and age.
Users can assign <code class="highlighter-rouge">phenotype_info=phe_info</code> and choose specific phenotype column(s) to display using <code class="highlighter-rouge">use_phe</code>.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.heatmap</span><span class="p">(</span><span class="n">mat</span><span class="o">=</span><span class="n">exp_mat</span><span class="p">,</span><span class="n">use_genes</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'originalID'</span><span class="p">],</span><span class="n">use_gene_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'geneSymbol'</span><span class="p">],</span><span class="w">
             </span><span class="n">use_samples</span><span class="o">=</span><span class="n">colnames</span><span class="p">(</span><span class="n">exp_mat</span><span class="p">),</span><span class="n">use_sample_label</span><span class="o">=</span><span class="n">phe_info</span><span class="p">[</span><span class="n">colnames</span><span class="p">(</span><span class="n">exp_mat</span><span class="p">),</span><span class="s1">'geo_accession'</span><span class="p">],</span><span class="w">
             </span><span class="n">phenotype_info</span><span class="o">=</span><span class="n">phe_info</span><span class="p">,</span><span class="n">use_phe</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'gender'</span><span class="p">,</span><span class="s1">'pathology'</span><span class="p">,</span><span class="s1">'subgroup'</span><span class="p">,</span><span class="s1">'age'</span><span class="p">),</span><span class="n">main</span><span class="o">=</span><span class="s1">'Expression for Top drivers'</span><span class="p">,</span><span class="n">scale</span><span class="o">=</span><span class="s1">'row'</span><span class="p">,</span><span class="w">
             </span><span class="n">cluster_rows</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="n">cluster_columns</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="n">clustering_distance_rows</span><span class="o">=</span><span class="s1">'pearson'</span><span class="p">,</span><span class="n">clustering_distance_columns</span><span class="o">=</span><span class="s1">'pearson'</span><span class="p">,</span><span class="w">
             </span><span class="n">row_names_gp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gpar</span><span class="p">(</span><span class="n">fontsize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">12</span><span class="p">),</span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/heatmap_demo1.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
             </span><span class="n">pre_define</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'WNT'</span><span class="o">=</span><span class="s1">'blue'</span><span class="p">,</span><span class="s1">'SHH'</span><span class="o">=</span><span class="s1">'red'</span><span class="p">,</span><span class="s1">'G4'</span><span class="o">=</span><span class="s1">'green'</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="heatmap_demo1.png" alt="heatmap_demo1" /></p>

<ul>
  <li>Draw the heatmap using activity value of top DA drivers. 
Here, the <code class="highlighter-rouge">use_genes</code> must be the <code class="highlighter-rouge">originalID_label</code>. But user can also use the label in the <code class="highlighter-rouge">gene_label</code> column for display.
In the demo, the original label is gene symbol. But in some cases, the original label can be the ensemble_gene_id, then the originalID will be different. In this case, user can choose the gene symbol in <code class="highlighter-rouge">gene_label</code> (set by <code class="highlighter-rouge">use_gene_label</code>) for display.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.heatmap</span><span class="p">(</span><span class="n">mat</span><span class="o">=</span><span class="n">ac_mat</span><span class="p">,</span><span class="n">use_genes</span><span class="o">=</span><span class="n">driver_list</span><span class="p">,</span><span class="n">use_gene_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="w">
             </span><span class="n">use_samples</span><span class="o">=</span><span class="n">colnames</span><span class="p">(</span><span class="n">exp_mat</span><span class="p">),</span><span class="n">use_sample_label</span><span class="o">=</span><span class="n">phe_info</span><span class="p">[</span><span class="n">colnames</span><span class="p">(</span><span class="n">exp_mat</span><span class="p">),</span><span class="s1">'geo_accession'</span><span class="p">],</span><span class="w">
             </span><span class="n">phenotype_info</span><span class="o">=</span><span class="n">phe_info</span><span class="p">,</span><span class="n">use_phe</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'gender'</span><span class="p">,</span><span class="s1">'pathology'</span><span class="p">,</span><span class="s1">'subgroup'</span><span class="p">,</span><span class="s1">'age'</span><span class="p">),</span><span class="n">main</span><span class="o">=</span><span class="s1">'Activity for Top drivers'</span><span class="p">,</span><span class="n">scale</span><span class="o">=</span><span class="s1">'row'</span><span class="p">,</span><span class="w">
             </span><span class="n">cluster_rows</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="n">cluster_columns</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="n">clustering_distance_rows</span><span class="o">=</span><span class="s1">'pearson'</span><span class="p">,</span><span class="n">clustering_distance_columns</span><span class="o">=</span><span class="s1">'pearson'</span><span class="p">,</span><span class="w">
             </span><span class="n">row_names_gp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gpar</span><span class="p">(</span><span class="n">fontsize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">12</span><span class="p">),</span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/heatmap_demo2.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
             </span><span class="n">pre_define</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'WNT'</span><span class="o">=</span><span class="s1">'blue'</span><span class="p">,</span><span class="s1">'SHH'</span><span class="o">=</span><span class="s1">'red'</span><span class="p">,</span><span class="s1">'G4'</span><span class="o">=</span><span class="s1">'green'</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="heatmap_demo2.png" alt="heatmap_demo2" /></p>

<p>Now, we compare the two heatmaps we created using the expression matrix and the activity matrix of top DA drivers. As we can see, the activity matrix gives a much cleaner pattern than the expression matrix. Same observation from the top DE drivers. Figures not shown below, but users can use the script below to check. 
This observation highly suggested the activity value of driver may be more robust than expression value in sample classification.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Draw heatmaps using top DE genes             </span><span class="w">
</span><span class="n">gene_list</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">sig_gene</span><span class="p">)</span><span class="w"> 
</span><span class="n">draw.heatmap</span><span class="p">(</span><span class="n">mat</span><span class="o">=</span><span class="n">exp_mat</span><span class="p">,</span><span class="n">use_genes</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">gene_list</span><span class="p">,</span><span class="s1">'originalID'</span><span class="p">],</span><span class="n">use_gene_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">gene_list</span><span class="p">,</span><span class="s1">'geneSymbol'</span><span class="p">],</span><span class="w">
             </span><span class="n">use_samples</span><span class="o">=</span><span class="n">colnames</span><span class="p">(</span><span class="n">exp_mat</span><span class="p">),</span><span class="n">use_sample_label</span><span class="o">=</span><span class="n">phe_info</span><span class="p">[</span><span class="n">colnames</span><span class="p">(</span><span class="n">exp_mat</span><span class="p">),</span><span class="s1">'geo_accession'</span><span class="p">],</span><span class="w">
             </span><span class="n">phenotype_info</span><span class="o">=</span><span class="n">phe_info</span><span class="p">,</span><span class="n">use_phe</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'gender'</span><span class="p">,</span><span class="s1">'pathology'</span><span class="p">,</span><span class="s1">'subgroup'</span><span class="p">,</span><span class="s1">'age'</span><span class="p">),</span><span class="n">main</span><span class="o">=</span><span class="s1">'Expression for Top drivers'</span><span class="p">,</span><span class="n">scale</span><span class="o">=</span><span class="s1">'row'</span><span class="p">,</span><span class="w">
             </span><span class="n">cluster_rows</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="n">cluster_columns</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="n">clustering_distance_rows</span><span class="o">=</span><span class="s1">'pearson'</span><span class="p">,</span><span class="n">clustering_distance_columns</span><span class="o">=</span><span class="s1">'pearson'</span><span class="p">,</span><span class="w">
             </span><span class="n">row_names_gp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gpar</span><span class="p">(</span><span class="n">fontsize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">12</span><span class="p">),</span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/heatmap_demo3.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
             </span><span class="n">pre_define</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'WNT'</span><span class="o">=</span><span class="s1">'blue'</span><span class="p">,</span><span class="s1">'SHH'</span><span class="o">=</span><span class="s1">'red'</span><span class="p">,</span><span class="s1">'G4'</span><span class="o">=</span><span class="s1">'green'</span><span class="p">))</span><span class="w">

</span><span class="n">draw.heatmap</span><span class="p">(</span><span class="n">mat</span><span class="o">=</span><span class="n">ac_mat</span><span class="p">,</span><span class="n">use_genes</span><span class="o">=</span><span class="w"> </span><span class="n">gene_list</span><span class="p">,</span><span class="n">use_gene_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">gene_list</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="w">
             </span><span class="n">use_samples</span><span class="o">=</span><span class="n">colnames</span><span class="p">(</span><span class="n">exp_mat</span><span class="p">),</span><span class="n">use_sample_label</span><span class="o">=</span><span class="n">phe_info</span><span class="p">[</span><span class="n">colnames</span><span class="p">(</span><span class="n">exp_mat</span><span class="p">),</span><span class="s1">'geo_accession'</span><span class="p">],</span><span class="w">
             </span><span class="n">phenotype_info</span><span class="o">=</span><span class="n">phe_info</span><span class="p">,</span><span class="n">use_phe</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'gender'</span><span class="p">,</span><span class="s1">'pathology'</span><span class="p">,</span><span class="s1">'subgroup'</span><span class="p">,</span><span class="s1">'age'</span><span class="p">),</span><span class="n">main</span><span class="o">=</span><span class="s1">'Activity for Top drivers'</span><span class="p">,</span><span class="n">scale</span><span class="o">=</span><span class="s1">'row'</span><span class="p">,</span><span class="w">
             </span><span class="n">cluster_rows</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="n">cluster_columns</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="n">clustering_distance_rows</span><span class="o">=</span><span class="s1">'pearson'</span><span class="p">,</span><span class="n">clustering_distance_columns</span><span class="o">=</span><span class="s1">'pearson'</span><span class="p">,</span><span class="w">
             </span><span class="n">row_names_gp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gpar</span><span class="p">(</span><span class="n">fontsize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">12</span><span class="p">),</span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/heatmap_demo4.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
             </span><span class="n">pre_define</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'WNT'</span><span class="o">=</span><span class="s1">'blue'</span><span class="p">,</span><span class="s1">'SHH'</span><span class="o">=</span><span class="s1">'red'</span><span class="p">,</span><span class="s1">'G4'</span><span class="o">=</span><span class="s1">'green'</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<h3 id="qi4-what-are-the-biological-functions-of-these-top-da-drivers-">QI.4: What are the biological functions of these top DA drivers ?</h3>

<p>In order to study the biological functions of these top DA drivers, we need to import the curated gene sets from <a href="http://software.broadinstitute.org/gsea/msigdb">MSigDB</a>.</p>

<p>NetBID2 has provided one function <code class="highlighter-rouge">gs.preload()</code> to automatically download curated gene sets from MSigDB (based on <a href="https://cran.r-project.org/web/packages/msigdbr/index.html">msigdbr</a>). 
Users only need to give a species names as input to the function. All available species names can be found by calling <code class="highlighter-rouge">msigdbr_show_species()</code>. By default, the species name is ‚ÄúHomo sapiens‚Äù. And NetBID2 has it downloaded in the package already.</p>

<p>Similar to <code class="highlighter-rouge">db.preload()</code>, if users leave <code class="highlighter-rouge">main.dir=NULL</code>, the downloaded data will be save as RData into the followin path, <code class="highlighter-rouge">system.file(package = "NetBID2")/db/</code>. However, if NetBID2 is installed in a public server and user doesn‚Äôt root permission, he needs to give accessible path to <code class="highlighter-rouge">main.dir</code>.</p>

<p>To check the detailed information of the downloaded gene sets, user can use the following scripts. Print <code class="highlighter-rouge">all_gs2gene_info</code> from the global variable <code class="highlighter-rouge">all_gs2gene</code>. The column <code class="highlighter-rouge">Category</code> and <code class="highlighter-rouge">Sub-Category</code> will be used as the label to extract gene sets categories.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Download gene sets from MSigDB and save as RData, creat a global variable all_gs2gene</span><span class="w">
</span><span class="n">gs.preload</span><span class="p">(</span><span class="n">use_spe</span><span class="o">=</span><span class="s1">'Homo sapiens'</span><span class="p">,</span><span class="n">update</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">all_gs2gene_info</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="all_gs2gene_info.png" alt="all_gs2gene_info" /></p>

<p>To perform gene set enrichment analysis, NetBID2 provides <code class="highlighter-rouge">funcEnrich.Fisher()</code>.</p>

<p>Details about how to use <code class="highlighter-rouge">funcEnrich.Fisher()</code>: <code class="highlighter-rouge">input_list</code> and <code class="highlighter-rouge">bg_list</code> must be the gene symbols, which is the <code class="highlighter-rouge">geneSymbol</code> column in the master table; <code class="highlighter-rouge">gs2gene</code> is a list contains elements of gene sets. The name of the element is gene set, each element contains a vector of genes in that gene set. If NULL, will use <code class="highlighter-rouge">all_gs2gene</code>, which is created by function <code class="highlighter-rouge">gs.preload()</code>; <code class="highlighter-rouge">use_gs</code> is a vector of the names of gene sets, it can be a mixture of <code class="highlighter-rouge">Category</code> name and <code class="highlighter-rouge">Sub-Category</code> name. Users don‚Äôt need to worry about the gene redundant issue, all the gene sets will be handled by <code class="highlighter-rouge">merge_gs()</code>, which will merge the redundant information.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Gene Set Enrichment Analysis</span><span class="w">
</span><span class="n">driver_list_up</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">sig_driver</span><span class="p">)[</span><span class="n">which</span><span class="p">(</span><span class="n">sig_driver</span><span class="p">[,</span><span class="m">2</span><span class="p">]</span><span class="o">&gt;</span><span class="m">0</span><span class="p">)]</span><span class="w"> </span><span class="c1"># up</span><span class="w">
</span><span class="n">driver_list_down</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">sig_driver</span><span class="p">)[</span><span class="n">which</span><span class="p">(</span><span class="n">sig_driver</span><span class="p">[,</span><span class="m">2</span><span class="p">]</span><span class="o">&lt;</span><span class="m">0</span><span class="p">)]</span><span class="w"> </span><span class="c1"># down</span><span class="w">
</span><span class="n">res_up</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">funcEnrich.Fisher</span><span class="p">(</span><span class="n">input_list</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list_up</span><span class="p">,</span><span class="s1">'geneSymbol'</span><span class="p">],</span><span class="n">bg_list</span><span class="o">=</span><span class="n">unique</span><span class="p">(</span><span class="n">ms_tab</span><span class="p">[,</span><span class="s1">'geneSymbol'</span><span class="p">]),</span><span class="n">use_gs</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'H'</span><span class="p">,</span><span class="s1">'CP:REACTOME'</span><span class="p">,</span><span class="s1">'BP'</span><span class="p">,</span><span class="s1">'CGP'</span><span class="p">),</span><span class="w"> </span><span class="n">Pv_thre</span><span class="o">=</span><span class="m">0.1</span><span class="p">,</span><span class="n">Pv_adj</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'none'</span><span class="p">,</span><span class="n">min_gs_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">30</span><span class="p">,</span><span class="w"> </span><span class="n">max_gs_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">500</span><span class="p">)</span><span class="w">
</span><span class="n">res_down</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">funcEnrich.Fisher</span><span class="p">(</span><span class="n">input_list</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list_down</span><span class="p">,</span><span class="s1">'geneSymbol'</span><span class="p">],</span><span class="n">bg_list</span><span class="o">=</span><span class="n">unique</span><span class="p">(</span><span class="n">ms_tab</span><span class="p">[,</span><span class="s1">'geneSymbol'</span><span class="p">]),</span><span class="n">use_gs</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'H'</span><span class="p">,</span><span class="s1">'CP:REACTOME'</span><span class="p">,</span><span class="s1">'BP'</span><span class="p">,</span><span class="s1">'CGP'</span><span class="p">),</span><span class="w"> </span><span class="n">Pv_thre</span><span class="o">=</span><span class="m">0.1</span><span class="p">,</span><span class="n">Pv_adj</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'none'</span><span class="p">,</span><span class="n">min_gs_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">30</span><span class="p">,</span><span class="w"> </span><span class="n">max_gs_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">500</span><span class="p">)</span><span class="w">                       
</span></code></pre></div></div>

<p><code class="highlighter-rouge">funcEnrich.Fisher()</code> uses Fisher‚Äôs Exact Test and return detailed results for the gene set enrichment analysis. And the <a href="fisher_res.xlsx">results</a> can be saved as EXCEL file by <code class="highlighter-rouge">out2excel()</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Save gene set enrichment analysis results as EXCEl</span><span class="w">
</span><span class="n">out2excel</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">up</span><span class="o">=</span><span class="n">res_up</span><span class="p">,</span><span class="n">down</span><span class="o">=</span><span class="n">res_down</span><span class="p">),</span><span class="n">out.xlsx</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/fisher_res.xlsx'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>NetBID2 also designed two functions to visualze the gene set enrichment analysis for these top drivers: <code class="highlighter-rouge">draw.funcEnrich.bar()</code> and <code class="highlighter-rouge">draw.funcEnrich.cluster()</code>.</p>

<ul>
  <li><code class="highlighter-rouge">draw.funcEnrich.bar()</code> draws a horizontal barplot to display the top enriched functions and the corresponding drivers (if set <code class="highlighter-rouge">display_genes=TRUE</code>).</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Gene set enrichment analysis Barplot</span><span class="w">
</span><span class="n">draw.funcEnrich.bar</span><span class="p">(</span><span class="n">funcEnrich_res</span><span class="o">=</span><span class="w"> </span><span class="n">res_up</span><span class="p">,</span><span class="n">top_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">main</span><span class="o">=</span><span class="s1">'Function Enrichment for Top drivers'</span><span class="p">,</span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/funcEnrich_bar_nogene.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">))</span><span class="w">
</span><span class="n">draw.funcEnrich.bar</span><span class="p">(</span><span class="n">funcEnrich_res</span><span class="o">=</span><span class="w"> </span><span class="n">res_up</span><span class="p">,</span><span class="n">top_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">main</span><span class="o">=</span><span class="s1">'Function Enrichment for Top drivers'</span><span class="p">,</span><span class="n">display_genes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="n">gs_cex</span><span class="o">=</span><span class="m">0.6</span><span class="p">,</span><span class="w">
                    </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/funcEnrich_bar_withgene.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="funcEnrich_bar_withgene.png" alt="funcEnrich_bar_withgene" /></p>

<ul>
  <li>Considering the function redundancy of gene sets, users can call <code class="highlighter-rouge">draw.funcEnrich.cluster()</code> to cluster genes by their function similarity.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Gene set enrichment analysis Function Cluster Plot</span><span class="w">
</span><span class="n">draw.funcEnrich.cluster</span><span class="p">(</span><span class="n">funcEnrich_res</span><span class="o">=</span><span class="w"> </span><span class="n">res_up</span><span class="p">,</span><span class="n">top_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">gs_cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.4</span><span class="p">,</span><span class="n">gene_cex</span><span class="o">=</span><span class="m">1.5</span><span class="p">,</span><span class="n">pv_cex</span><span class="o">=</span><span class="m">1.2</span><span class="p">,</span><span class="n">pdf_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/funcEnrich_clusterBOTH.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
                        </span><span class="n">cluster_gs</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="n">cluster_gene</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="n">h</span><span class="o">=</span><span class="m">0.95</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>In the figure below, the top 30 enriched terms can be clustered into 6 groups (cluster size can be adjusted by <code class="highlighter-rouge">h</code>). 
Genes belong to each term is marked with red in the table cell. 
As we can see, the top enriched gene sets are related with lipid biosynthetic process. Detail about this process, please check <a href="http://software.broadinstitute.org/gsea/msigdb/geneset_page.jsp?geneSetName=GO_LIPID_BIOSYNTHETIC_PROCESS">‚ÄòGO_LIPID_BIOSYNTHETIC_PROCESS‚Äô</a></p>

<p><img src="funcEnrich_clusterBOTH.png" alt="funcEnrich_clusterBOTH" /></p>

<p>To explore the handlers in <code class="highlighter-rouge">draw.funcEnrich.cluster()</code>, please try the following scripts.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.funcEnrich.cluster</span><span class="p">(</span><span class="n">funcEnrich_res</span><span class="o">=</span><span class="w"> </span><span class="n">res_up</span><span class="p">,</span><span class="n">top_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">gs_cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.8</span><span class="p">,</span><span class="n">gene_cex</span><span class="o">=</span><span class="m">0.9</span><span class="p">,</span><span class="n">pv_cex</span><span class="o">=</span><span class="m">0.8</span><span class="p">,</span><span class="n">pdf_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/funcEnrich_clusterGS.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
                        </span><span class="n">cluster_gs</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="n">cluster_gene</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span><span class="n">draw.funcEnrich.cluster</span><span class="p">(</span><span class="n">funcEnrich_res</span><span class="o">=</span><span class="w"> </span><span class="n">res_up</span><span class="p">,</span><span class="n">top_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">gs_cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.8</span><span class="p">,</span><span class="n">gene_cex</span><span class="o">=</span><span class="m">0.9</span><span class="p">,</span><span class="n">pv_cex</span><span class="o">=</span><span class="m">0.8</span><span class="p">,</span><span class="n">pdf_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/funcEnrich_clusterGENE.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
                        </span><span class="n">cluster_gs</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span><span class="n">cluster_gene</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">draw.funcEnrich.cluster</span><span class="p">(</span><span class="n">funcEnrich_res</span><span class="o">=</span><span class="w"> </span><span class="n">res_up</span><span class="p">,</span><span class="n">top_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">gs_cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.5</span><span class="p">,</span><span class="n">gene_cex</span><span class="o">=</span><span class="m">1.4</span><span class="p">,</span><span class="n">pv_cex</span><span class="o">=</span><span class="m">1.2</span><span class="p">,</span><span class="n">pdf_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/funcEnrich_clusterNO.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
                        </span><span class="n">cluster_gs</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span><span class="n">cluster_gene</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="qi5-what-are-the-biological-functions-of-the-target-genes-of-these-top-da-drivers-">QI.5: What are the biological functions of the target genes of these top DA drivers ?</h3>

<p>The biological function of driver is to regulated by its target genes. For a driver, what are the biological functions of its target genes? NetBID2 provides a function <code class="highlighter-rouge">draw.bubblePlot()</code> to investigate this question.</p>

<p>First, get the ID conversion table. This is because NetBID2 only accepts gene symbol as ID type for gene set annotation (for more general application, please check the last part of this section). This conversion table is already wrapped inside <code class="highlighter-rouge">analysis.par</code> super list created by <code class="highlighter-rouge">get_IDtransfer2symbol2type()</code>. If not, user could use <code class="highlighter-rouge">get_IDtransfer2symbol2type()</code> to get.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get ID conversion table</span><span class="w">
</span><span class="n">transfer_tab</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analysis.par</span><span class="o">$</span><span class="n">transfer_tab</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">draw.bubblePlot()</code> has 21 parameters, but most of them are the same as in <code class="highlighter-rouge">funcEnrich.Fisher()</code>. For the demo, user only need to prepare the ID conversion table to <code class="highlighter-rouge">transfer2symbol2type</code>. Another interested parameter is <code class="highlighter-rouge">display_gs_list</code>, which can be set to pick which gene set(s) to be displayed in the plot.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Bubble Plot to show target genes enriched biological functions</span><span class="w">
</span><span class="n">draw.bubblePlot</span><span class="p">(</span><span class="n">driver_list</span><span class="o">=</span><span class="w"> </span><span class="n">driver_list</span><span class="p">,</span><span class="n">show_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="w">
                </span><span class="n">Z_val</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                </span><span class="n">driver_type</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'gene_biotype'</span><span class="p">],</span><span class="w">
                </span><span class="n">target_list</span><span class="o">=</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">,</span><span class="n">transfer2symbol2type</span><span class="o">=</span><span class="n">transfer_tab</span><span class="p">,</span><span class="w">
                </span><span class="n">bg_list</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[,</span><span class="s1">'geneSymbol'</span><span class="p">],</span><span class="n">min_gs_size</span><span class="o">=</span><span class="m">5</span><span class="p">,</span><span class="n">max_gs_size</span><span class="o">=</span><span class="m">500</span><span class="p">,</span><span class="n">use_gs</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'H'</span><span class="p">),</span><span class="w">
                </span><span class="n">top_geneset_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">top_driver_number</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w">
                </span><span class="n">pdf_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/bubblePlot.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
                </span><span class="n">main</span><span class="o">=</span><span class="s1">'Bubbleplot for top driver targets'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li><strong>Explanation of the bubble plot.</strong></li>
</ul>

<p>Each column is a driver, each row is a curated gene set. The size of the circle is the number of intersected genes (legend on the top) and the color shade of the circle represents the significance using P-value (legend on the right). The color shade of boxes above the barplot shows the significance of the each driver (user need to input the Z-statistics). The barplot at the bottom shows the target size of each driver (filtered by protein coding), and the circle below the barplot represents the driver type (optional, <code class="highlighter-rouge">driver_type</code>). For example, the target genes of the Group4 <em>up</em> driver <code class="highlighter-rouge">PDE7B_SIG</code> are significantly enriched in <code class="highlighter-rouge">KEGG_AXON_GUIDANCE</code> term (with P-value of 1e-10), with 17 intersected genes.</p>

<p><img src="bubblePlot.png" alt="bubblePlot" /></p>

<p>To explore the handlers in <code class="highlighter-rouge">draw.bubblePlot()</code>, please try the following scripts.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.bubblePlot</span><span class="p">(</span><span class="n">driver_list</span><span class="o">=</span><span class="w"> </span><span class="n">driver_list</span><span class="p">,</span><span class="n">show_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="w">
                </span><span class="n">Z_val</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                </span><span class="n">driver_type</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'gene_biotype'</span><span class="p">],</span><span class="w">
                </span><span class="n">target_list</span><span class="o">=</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">,</span><span class="n">transfer2symbol2type</span><span class="o">=</span><span class="n">transfer_tab</span><span class="p">,</span><span class="w">
                </span><span class="n">bg_list</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[,</span><span class="s1">'geneSymbol'</span><span class="p">],</span><span class="n">min_gs_size</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="n">max_gs_size</span><span class="o">=</span><span class="m">300</span><span class="p">,</span><span class="n">use_gs</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'CP:KEGG'</span><span class="p">),</span><span class="w">
                </span><span class="n">top_geneset_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">top_driver_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="w">
                </span><span class="n">pdf_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/bubblePlot_KEGG.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
                </span><span class="n">main</span><span class="o">=</span><span class="s1">'Bubbleplot for top driver targets'</span><span class="p">)</span><span class="w">
</span><span class="c1"># Add marker genes</span><span class="w">
</span><span class="n">mark_gene</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'KCNA1'</span><span class="p">,</span><span class="s1">'EOMES'</span><span class="p">,</span><span class="s1">'KHDRBS2'</span><span class="p">,</span><span class="s1">'RBM24'</span><span class="p">,</span><span class="s1">'UNC5D'</span><span class="p">)</span><span class="w"> </span><span class="c1">## marker for Group4</span><span class="w">
</span><span class="n">draw.bubblePlot</span><span class="p">(</span><span class="n">driver_list</span><span class="o">=</span><span class="w"> </span><span class="n">driver_list</span><span class="p">,</span><span class="n">show_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">rownames</span><span class="p">(</span><span class="n">sig_driver</span><span class="p">),</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="w">
                </span><span class="n">Z_val</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                </span><span class="n">driver_type</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'gene_biotype'</span><span class="p">],</span><span class="w">
                </span><span class="n">target_list</span><span class="o">=</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">,</span><span class="n">transfer2symbol2type</span><span class="o">=</span><span class="n">transfer_tab</span><span class="p">,</span><span class="w">
                </span><span class="n">bg_list</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[,</span><span class="s1">'geneSymbol'</span><span class="p">],</span><span class="n">min_gs_size</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="n">max_gs_size</span><span class="o">=</span><span class="m">300</span><span class="p">,</span><span class="n">use_gs</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'CP:KEGG'</span><span class="p">,</span><span class="s1">'CP:BIOCARTA'</span><span class="p">,</span><span class="s1">'H'</span><span class="p">),</span><span class="w">
                </span><span class="n">top_geneset_number</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">top_driver_number</span><span class="o">=</span><span class="m">80</span><span class="p">,</span><span class="w">
                </span><span class="n">pdf_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/bubblePlot_combine.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
                </span><span class="n">main</span><span class="o">=</span><span class="s1">'Bubbleplot for top driver targets'</span><span class="p">,</span><span class="w">
                </span><span class="n">mark_gene</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">which</span><span class="p">(</span><span class="n">ms_tab</span><span class="o">$</span><span class="n">geneSymbol</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">mark_gene</span><span class="p">),</span><span class="s1">'originalID_label'</span><span class="p">],</span><span class="n">gs_cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="n">driver_cex</span><span class="o">=</span><span class="m">1.2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h2 id="part-ii-more-details-about-the-selected-driver">Part II: More details about the selected driver</h2>

<h3 id="qii1-how-to-interpret-the-significance-of-the-selected-driver-">QII.1: How to interpret the significance of the selected driver ?</h3>

<p>To study a single driver or some specific drivers, NetBID2 provides function <code class="highlighter-rouge">draw.GSEA()</code> to draw the classic GSEA plot, in order to faciliate the interpretation of the significance of target driver(s).</p>

<p>First, retrieve the differential expressed gene profile first.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get the DE file</span><span class="w">
</span><span class="n">DE</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analysis.par</span><span class="o">$</span><span class="n">DE</span><span class="p">[[</span><span class="n">comp_name</span><span class="p">]]</span><span class="w">
</span><span class="n">DE_profile</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">DE</span><span class="o">$</span><span class="n">`Z-statistics`</span><span class="p">;</span><span class="w"> 
</span><span class="nf">names</span><span class="p">(</span><span class="n">DE_profile</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">DE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Then, extract out the target gene list and the regulation direction of the selected driver. Here, we use the P-value in master table as annotation for the enrichment. The classic GSEA plot test may use different statistics, user can decide which one to use as annotation and calculate it.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Use the first driver in the driver list as an example</span><span class="w">
</span><span class="n">use_driver</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">driver_list</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="n">use_target_genes</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">[[</span><span class="n">use_driver</span><span class="p">]]</span><span class="o">$</span><span class="n">target</span><span class="w">
</span><span class="n">use_target_direction</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">sign</span><span class="p">(</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">[[</span><span class="n">use_driver</span><span class="p">]]</span><span class="o">$</span><span class="n">spearman</span><span class="p">)</span><span class="w"> </span><span class="c1">## 1/-1</span><span class="w">
</span><span class="n">annot</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'P-value: %s'</span><span class="p">,</span><span class="nf">signif</span><span class="p">(</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'P.Value.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="m">2</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Draw classic GSEA plot for one driver</span><span class="w">
</span><span class="n">draw.GSEA</span><span class="p">(</span><span class="n">rank_profile</span><span class="o">=</span><span class="n">DE_profile</span><span class="p">,</span><span class="n">use_genes</span><span class="o">=</span><span class="n">use_target_genes</span><span class="p">,</span><span class="n">use_direction</span><span class="o">=</span><span class="n">use_target_direction</span><span class="p">,</span><span class="w">
          </span><span class="n">main</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'GSEA plot for driver %s'</span><span class="p">,</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">]),</span><span class="w">
          </span><span class="n">pdf_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/GSEA_each_direction.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
          </span><span class="n">annotation</span><span class="o">=</span><span class="n">annot</span><span class="p">,</span><span class="n">annotation_cex</span><span class="o">=</span><span class="m">1.2</span><span class="p">,</span><span class="w">
          </span><span class="n">left_annotation</span><span class="o">=</span><span class="s1">'high in G4'</span><span class="p">,</span><span class="n">right_annotation</span><span class="o">=</span><span class="s1">'high in others'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="GSEA_each_direction.png" alt="GSEA_each_direction" /></p>

<p>NetBID2 will draw a classic GSEA plot, if no direction information is provided.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># GSEA plot without direction, without annotation</span><span class="w">
</span><span class="n">draw.GSEA</span><span class="p">(</span><span class="n">rank_profile</span><span class="o">=</span><span class="n">DE_profile</span><span class="p">,</span><span class="n">use_genes</span><span class="o">=</span><span class="n">use_target_genes</span><span class="p">,</span><span class="n">use_direction</span><span class="o">=</span><span class="kc">NULL</span><span class="p">,</span><span class="w">
          </span><span class="n">main</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'GSEA plot for driver %s'</span><span class="p">,</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">]),</span><span class="w">
          </span><span class="n">pdf_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/GSEA_each.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
          </span><span class="n">annotation</span><span class="o">=</span><span class="s1">''</span><span class="p">,</span><span class="n">annotation_cex</span><span class="o">=</span><span class="m">1.2</span><span class="p">,</span><span class="w">
          </span><span class="n">left_annotation</span><span class="o">=</span><span class="s1">'high in G4'</span><span class="p">,</span><span class="n">right_annotation</span><span class="o">=</span><span class="s1">'high in others'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="qii2-how-to-visualize-the-network-structure-of-the-selected-driver-">QII.2: How to visualize the network structure of the selected driver ?</h3>

<p>The sub-network structure of the selected driver composed of one source node (driver) and its target nodes (target genes).
The edges of the network contains weight of <code class="highlighter-rouge">mutual information</code> and direction of the sign of<code class="highlighter-rouge">spearman</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Use the first driver in the driver list as an example</span><span class="w">
</span><span class="n">use_driver</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">driver_list</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="c1"># Define edges of the network</span><span class="w">
</span><span class="n">edge_score</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">[[</span><span class="n">use_driver</span><span class="p">]]</span><span class="o">$</span><span class="n">MI</span><span class="o">*</span><span class="nf">sign</span><span class="p">(</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">[[</span><span class="n">use_driver</span><span class="p">]]</span><span class="o">$</span><span class="n">spearman</span><span class="p">)</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">edge_score</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">[[</span><span class="n">use_driver</span><span class="p">]]</span><span class="o">$</span><span class="n">target</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>For better visualization, users can adjust <code class="highlighter-rouge">n_layer</code> and <code class="highlighter-rouge">label_cex</code> parameters. <code class="highlighter-rouge">n_layer</code> controls number of circle layers to display. <code class="highlighter-rouge">label_cex</code> controls the text size of the gene names. By default, the <code class="highlighter-rouge">alphabetical_order=FALSE</code> and the edges are sorted by the edge score. If <code class="highlighter-rouge">alphabetical_order=TRUE</code>, the target genes are sorted alphabetically from inner layer to outer layer.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Draw sub-network structure of selected driver</span><span class="w">
</span><span class="n">draw.targetNet</span><span class="p">(</span><span class="n">source_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="n">source_z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
               </span><span class="n">edge_score</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">edge_score</span><span class="p">,</span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/targetNet_out.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="n">label_cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.4</span><span class="p">,</span><span class="n">n_layer</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">alphabetical_order</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="targetNet_out.png" alt="targetNet_out" /></p>

<ul>
  <li>Users can also change the arrow direction to ‚Äúin‚Äù (from target to source), and set <code class="highlighter-rouge">alphabetical_order=FALSE</code>, so the target genes are sorted by the edge score (positive to negative) from inner layer to outer layer. As shown below.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.targetNet</span><span class="p">(</span><span class="n">source_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="n">source_z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
               </span><span class="n">edge_score</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">edge_score</span><span class="p">,</span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/targetNet_in.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="n">label_cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.35</span><span class="p">,</span><span class="n">arrow_direction</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'in'</span><span class="p">,</span><span class="n">n_layer</span><span class="o">=</span><span class="m">6</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="targetNet_in.png" alt="targetNet_in" /></p>

<ul>
  <li><strong>To draw the sub-network structure of two selected drivers,</strong> users can call <code class="highlighter-rouge">draw.targetNet.TWO()</code>. Parameters like <code class="highlighter-rouge">n_layer</code> and <code class="highlighter-rouge">alphabetical_order</code> are the same as in <code class="highlighter-rouge">draw.targetNet()</code>. The overlapped target genes between these two drivers will be displayed in the middle as shown below.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Draw sub-network structure for two selected drivers</span><span class="w">
</span><span class="c1"># Use the first two drivers in the driver list as an example</span><span class="w">
</span><span class="n">use_driver2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">driver_list</span><span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="w">
</span><span class="n">edge_score2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">[[</span><span class="n">use_driver2</span><span class="p">]]</span><span class="o">$</span><span class="n">MI</span><span class="o">*</span><span class="nf">sign</span><span class="p">(</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">[[</span><span class="n">use_driver2</span><span class="p">]]</span><span class="o">$</span><span class="n">spearman</span><span class="p">)</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">edge_score2</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">[[</span><span class="n">use_driver2</span><span class="p">]]</span><span class="o">$</span><span class="n">target</span><span class="w">
</span><span class="n">use_genes</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">network_dat</span><span class="o">$</span><span class="n">target.symbol</span><span class="p">)</span><span class="w">
</span><span class="n">draw.targetNet.TWO</span><span class="p">(</span><span class="n">source1_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="n">edge_score1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">edge_score</span><span class="p">,</span><span class="w">
                   </span><span class="n">source2_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver2</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="n">edge_score2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">edge_score2</span><span class="p">,</span><span class="w">
                   </span><span class="n">source1_z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="n">source2_z</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">),</span><span class="w">
                   </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/targetNetTWO.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="n">total_possible_target</span><span class="o">=</span><span class="n">use_genes</span><span class="p">,</span><span class="n">show_test</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="n">label_cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="targetNetTWO.png" alt="targetNetTWO" /></p>

<p>To check the overlapped target genes of these two drivers, users can call <code class="highlighter-rouge">test.targetNet.overlap()</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># To show the overlapped target genes from two selected drivers</span><span class="w">
</span><span class="n">test.targetNet.overlap</span><span class="p">(</span><span class="n">source1_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="n">source2_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver2</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="w">
                       </span><span class="n">target1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">names</span><span class="p">(</span><span class="n">edge_score</span><span class="p">),</span><span class="n">target2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">names</span><span class="p">(</span><span class="n">edge_score2</span><span class="p">),</span><span class="n">total_possible_target</span><span class="o">=</span><span class="n">use_genes</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="qii3-what-is-the-expressionactivity-of-this-selected-driver-across-subtypes-of-sample">QII.3: What is the expression/activity of this selected driver across subtypes of sample?</h3>

<ul>
  <li><code class="highlighter-rouge">draw.categoryValue()</code> draws a scatter box plot to visualize one selected driver‚Äôs expression value and activity value across different phenotype subgroups of samples. Two side-by-side scatter box plots will be created. The left plot shows driver‚Äôs activity values in different phenotype subgroups, each point is a sample. The right plot shows driver‚Äôs expression value in different phenotype sub- groups, each point is a sample. To convert sample names to subgroups, one can call <code class="highlighter-rouge">get_obs_label()</code>. To modify the order of subgroups, one can set <code class="highlighter-rouge">class_order</code>. As shown in the figure below.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Creates a vector of each sample‚Äôs selected phenotype descriptive information</span><span class="w">
</span><span class="n">use_obs_class</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_obs_label</span><span class="p">(</span><span class="n">phe_info</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">phe_info</span><span class="p">,</span><span class="s1">'subgroup'</span><span class="p">)</span><span class="w">
</span><span class="n">draw.categoryValue</span><span class="p">(</span><span class="n">ac_val</span><span class="o">=</span><span class="n">ac_mat</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,],</span><span class="n">exp_val</span><span class="o">=</span><span class="n">exp_mat</span><span class="p">[</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="s1">'originalID'</span><span class="p">],],</span><span class="n">use_obs_class</span><span class="o">=</span><span class="n">use_obs_class</span><span class="p">,</span><span class="w">
                   </span><span class="n">class_order</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'WNT'</span><span class="p">,</span><span class="s1">'SHH'</span><span class="p">,</span><span class="s1">'G4'</span><span class="p">),</span><span class="n">class_srt</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">main_ac</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="n">main_exp</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="s1">'geneSymbol'</span><span class="p">],</span><span class="w">
                   </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/categoryValue_demo1.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
                   </span><span class="n">pre_define</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'WNT'</span><span class="o">=</span><span class="s1">'blue'</span><span class="p">,</span><span class="s1">'SHH'</span><span class="o">=</span><span class="s1">'red'</span><span class="p">,</span><span class="s1">'G4'</span><span class="o">=</span><span class="s1">'green'</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>
<p><img src="categoryValue_demo1.png" alt="categoryValue_demo1" /></p>

<p>To explore the handlers in <code class="highlighter-rouge">draw.categoryValue()</code>, please try the following scripts.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.categoryValue</span><span class="p">(</span><span class="n">ac_val</span><span class="o">=</span><span class="n">ac_mat</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,],</span><span class="n">exp_val</span><span class="o">=</span><span class="kc">NULL</span><span class="p">,</span><span class="n">use_obs_class</span><span class="o">=</span><span class="n">use_obs_class</span><span class="p">,</span><span class="n">class_order</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'WNT'</span><span class="p">,</span><span class="s1">'SHH'</span><span class="p">,</span><span class="s1">'G4'</span><span class="p">),</span><span class="w">
                   </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/categoryValue_demo2.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
                   </span><span class="n">pre_define</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'WNT'</span><span class="o">=</span><span class="s1">'blue'</span><span class="p">,</span><span class="s1">'SHH'</span><span class="o">=</span><span class="s1">'red'</span><span class="p">,</span><span class="s1">'G4'</span><span class="o">=</span><span class="s1">'green'</span><span class="p">))</span><span class="w">
</span><span class="n">use_obs_class</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_obs_label</span><span class="p">(</span><span class="n">phe_info</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">phe_info</span><span class="p">,</span><span class="nf">c</span><span class="p">(</span><span class="s1">'subgroup'</span><span class="p">,</span><span class="s1">'gender'</span><span class="p">))</span><span class="w">
</span><span class="n">draw.categoryValue</span><span class="p">(</span><span class="n">ac_val</span><span class="o">=</span><span class="n">ac_mat</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,],</span><span class="n">exp_val</span><span class="o">=</span><span class="n">exp_mat</span><span class="p">[</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="s1">'originalID'</span><span class="p">],],</span><span class="n">use_obs_class</span><span class="o">=</span><span class="n">use_obs_class</span><span class="p">,</span><span class="w">
                   </span><span class="n">class_srt</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">main_ac</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="n">main_exp</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">use_driver</span><span class="p">,</span><span class="s1">'geneSymbol'</span><span class="p">],</span><span class="w">
                   </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/categoryValue_demo3.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
                   </span><span class="n">pre_define</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'WNT'</span><span class="o">=</span><span class="s1">'blue'</span><span class="p">,</span><span class="s1">'SHH'</span><span class="o">=</span><span class="s1">'red'</span><span class="p">,</span><span class="s1">'G4'</span><span class="o">=</span><span class="s1">'green'</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<h3 id="qii4-what-are-the-functions-of-the-target-genes-of-this-selected-driver-">QII.4: What are the functions of the target genes of this selected driver ?</h3>

<ul>
  <li>Similar to the study of drivers, we can also study the functional enrichment for its target genes. First, please check the gene ID.
If the original ID is not gene symbol, users can call <code class="highlighter-rouge">get_name_transfertab()</code> to convert ID.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Use the first driver in the driver list as an example</span><span class="w">
</span><span class="n">use_driver</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">driver_list</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="n">use_target_genes</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">[[</span><span class="n">use_driver</span><span class="p">]]</span><span class="o">$</span><span class="n">target</span><span class="w">
</span><span class="c1">#use_target_genes &lt;- get_name_transfertab(use_genes= use_target_genes,transfer_tab=transfer_tab,ignore_version=TRUE)	# optional</span><span class="w">
</span><span class="c1"># Converts the original gene IDs into target gene IDs, with conversion table provided</span><span class="w">
</span><span class="n">bg_list</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_name_transfertab</span><span class="p">(</span><span class="n">use_genes</span><span class="o">=</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">network_dat</span><span class="o">$</span><span class="n">target</span><span class="p">),</span><span class="n">transfer_tab</span><span class="o">=</span><span class="n">transfer_tab</span><span class="p">,</span><span class="n">ignore_version</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w">	
</span><span class="n">res</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">funcEnrich.Fisher</span><span class="p">(</span><span class="n">input_list</span><span class="o">=</span><span class="w"> </span><span class="n">use_target_genes</span><span class="p">,</span><span class="n">bg_list</span><span class="o">=</span><span class="w"> </span><span class="n">bg_list</span><span class="p">,</span><span class="n">use_gs</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'H'</span><span class="p">,</span><span class="s1">'CP:REACTOME'</span><span class="p">,</span><span class="s1">'BP'</span><span class="p">,</span><span class="s1">'CGP'</span><span class="p">,</span><span class="s1">'CP:KEGG'</span><span class="p">),</span><span class="w">
                           </span><span class="n">Pv_thre</span><span class="o">=</span><span class="m">0.1</span><span class="p">,</span><span class="n">Pv_adj</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'none'</span><span class="p">,</span><span class="n">min_gs_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">30</span><span class="p">,</span><span class="w"> </span><span class="n">max_gs_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">500</span><span class="p">)</span><span class="w">
</span><span class="n">draw.funcEnrich.cluster</span><span class="p">(</span><span class="n">funcEnrich_res</span><span class="o">=</span><span class="w"> </span><span class="n">res</span><span class="p">,</span><span class="n">top_number</span><span class="o">=</span><span class="m">20</span><span class="p">,</span><span class="n">gs_cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.2</span><span class="p">,</span><span class="n">gene_cex</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="n">pv_cex</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="n">Pv_thre</span><span class="o">=</span><span class="m">0.1</span><span class="p">,</span><span class="w">
                        </span><span class="n">pdf_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/funcEnrich_clusterBOTH_%s.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">,</span><span class="n">use_driver</span><span class="p">),</span><span class="w">
                        </span><span class="n">cluster_gs</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="n">cluster_gene</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="n">h</span><span class="o">=</span><span class="m">0.95</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="funcEnrich_clusterBOTH_WBP11_SIG.png" alt="funcEnrich_clusterBOTH_WBP11_SIG" /></p>

<h2 id="part-iii-other-analyses-netbid2-can-do">Part III: Other analyses NetBID2 can do</h2>

<h3 id="qiii1-what-are-the-activities-of-the-curated-gene-sets-across-all-samples">QIII.1: What are the activities of the curated gene sets across all samples?</h3>

<p>The target genes of a driver can be seen as a special ‚Äúgene set‚Äù. We can use the same procedure to study the curated gene sets from the public datasets. Similar to the target-gene-study, we can calculate their activities and P-values.</p>

<p>First, prepare the expression matrix. The row names must be gene symbols.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Preload database files into R workspace</span><span class="w">
</span><span class="n">db.preload</span><span class="p">(</span><span class="n">use_level</span><span class="o">=</span><span class="s1">'gene'</span><span class="p">,</span><span class="n">use_spe</span><span class="o">=</span><span class="s1">'human'</span><span class="p">,</span><span class="n">update</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span><span class="c1"># Get the expression matrix, row names must be gene symbols</span><span class="w">
</span><span class="n">exp_mat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">exprs</span><span class="p">(</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">cal.eset</span><span class="p">)</span><span class="w"> 
</span><span class="c1"># If original is gene-based expression matrix, just use the exp_mat</span><span class="w">
</span><span class="n">exp_mat_gene</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">exp_mat</span><span class="w">
</span></code></pre></div></div>

<p>Second, choose gene sets. If users want to combine the categories, please use <code class="highlighter-rouge">merge_gs()</code>.
Then, use <code class="highlighter-rouge">cal.Activity.GS()</code> to calculate the activity values for the gene sets across all samples.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Calculate activity for all gene sets</span><span class="w">
</span><span class="n">use_gs2gene</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">merge_gs</span><span class="p">(</span><span class="n">all_gs2gene</span><span class="o">=</span><span class="n">all_gs2gene</span><span class="p">,</span><span class="n">use_gs</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'H'</span><span class="p">,</span><span class="s1">'CP:BIOCARTA'</span><span class="p">,</span><span class="s1">'CP:REACTOME'</span><span class="p">,</span><span class="s1">'CP:KEGG'</span><span class="p">,</span><span class="s1">'C5'</span><span class="p">))</span><span class="w">
</span><span class="n">ac_gs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cal.Activity.GS</span><span class="p">(</span><span class="n">use_gs2gene</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">use_gs2gene</span><span class="p">,</span><span class="n">cal_mat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">exp_mat_gene</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Third, perform statistical testing for the activity value of the gene sets. Please call <code class="highlighter-rouge">getDE.BID.2G()</code> or <code class="highlighter-rouge">getDE.limma.2G()</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Calculate DA</span><span class="w">
</span><span class="n">phe_info</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pData</span><span class="p">(</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">cal.eset</span><span class="p">)</span><span class="w">
</span><span class="n">G0</span><span class="w">  </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">phe_info</span><span class="p">)[</span><span class="n">which</span><span class="p">(</span><span class="n">phe_info</span><span class="o">$</span><span class="n">`subgroup`</span><span class="o">!=</span><span class="s1">'G4'</span><span class="p">)]</span><span class="w"> </span><span class="c1"># get sample list for G0</span><span class="w">
</span><span class="n">G1</span><span class="w">  </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">phe_info</span><span class="p">)[</span><span class="n">which</span><span class="p">(</span><span class="n">phe_info</span><span class="o">$</span><span class="n">`subgroup`</span><span class="o">==</span><span class="s1">'G4'</span><span class="p">)]</span><span class="w"> </span><span class="c1"># get sample list for G1</span><span class="w">
</span><span class="n">DA_gs_bid</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">getDE.BID.2G</span><span class="p">(</span><span class="n">eset</span><span class="o">=</span><span class="n">generate.eset</span><span class="p">(</span><span class="n">ac_gs</span><span class="p">),</span><span class="n">G1</span><span class="o">=</span><span class="n">G1</span><span class="p">,</span><span class="n">G0</span><span class="o">=</span><span class="n">G0</span><span class="p">,</span><span class="n">G1_name</span><span class="o">=</span><span class="s1">'G4'</span><span class="p">,</span><span class="n">G0_name</span><span class="o">=</span><span class="s1">'others'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Draw a volcano plot to visualize the results. <code class="highlighter-rouge">draw.volcanoPlot()</code> will also return the significant gene sets to <code class="highlighter-rouge">sig_gs</code>.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Draw vocalno plot for top significant gene sets</span><span class="w">
</span><span class="n">sig_gs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">draw.volcanoPlot</span><span class="p">(</span><span class="n">dat</span><span class="o">=</span><span class="w"> </span><span class="n">DA_gs_bid</span><span class="p">,</span><span class="n">label_col</span><span class="o">=</span><span class="s1">'ID'</span><span class="p">,</span><span class="n">logFC_col</span><span class="o">=</span><span class="s1">'logFC'</span><span class="p">,</span><span class="w">
                               </span><span class="n">Pv_col</span><span class="o">=</span><span class="s1">'P.Value'</span><span class="p">,</span><span class="n">logFC_thre</span><span class="o">=</span><span class="m">0.2</span><span class="p">,</span><span class="n">Pv_thre</span><span class="o">=</span><span class="m">1e-3</span><span class="p">,</span><span class="w">
                               </span><span class="n">main</span><span class="o">=</span><span class="s1">'Volcano Plot for gene sets'</span><span class="p">,</span><span class="n">show_label</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="n">label_type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'distribute'</span><span class="p">,</span><span class="n">label_cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.5</span><span class="p">,</span><span class="w">
                               </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/vocalno_GS_DA.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="vocalno_GS_DA.png" alt="vocalno_GS_DA" /></p>

<ul>
  <li>Draw a heatmap for the top significant gene sets.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Draw heatmap for top significant gene sets</span><span class="w">
</span><span class="n">draw.heatmap</span><span class="p">(</span><span class="n">mat</span><span class="o">=</span><span class="n">ac_gs</span><span class="p">[</span><span class="n">sig_gs</span><span class="o">$</span><span class="n">ID</span><span class="p">,],</span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/heatmap_GS.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="n">scale</span><span class="o">=</span><span class="s1">'row'</span><span class="p">,</span><span class="w">
             </span><span class="n">phenotype_info</span><span class="o">=</span><span class="n">phe_info</span><span class="p">,</span><span class="n">use_phe</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'gender'</span><span class="p">,</span><span class="s1">'subgroup'</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>NetBID2 style GSEA plot of gene sets can be plotted by <code class="highlighter-rouge">draw.GSEA.NetBID.GS()</code>. Different from <code class="highlighter-rouge">draw.GSEA.NetBID()</code>, the genes in the gene sets will not be divided into positively-regulated/negatively-regulated groups.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Draw GSEA plot for top significant gene sets</span><span class="w">
</span><span class="n">DE</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analysis.par</span><span class="o">$</span><span class="n">DE</span><span class="p">[[</span><span class="n">comp_name</span><span class="p">]]</span><span class="w">
</span><span class="n">draw.GSEA.NetBID.GS</span><span class="p">(</span><span class="n">DE</span><span class="o">=</span><span class="n">DE</span><span class="p">,</span><span class="n">name_col</span><span class="o">=</span><span class="s1">'ID'</span><span class="p">,</span><span class="n">profile_col</span><span class="o">=</span><span class="s1">'t'</span><span class="p">,</span><span class="n">profile_trend</span><span class="o">=</span><span class="s1">'pos2neg'</span><span class="p">,</span><span class="w">
                 </span><span class="n">sig_gs_list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sig_gs</span><span class="o">$</span><span class="n">ID</span><span class="p">,</span><span class="w">
                 </span><span class="n">gs_DA_Z</span><span class="o">=</span><span class="w"> </span><span class="n">DA_gs_bid</span><span class="p">[</span><span class="n">sig_gs</span><span class="o">$</span><span class="n">ID</span><span class="p">,</span><span class="s1">'Z-statistics'</span><span class="p">],</span><span class="w">
                 </span><span class="n">use_gs2gene</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">use_gs2gene</span><span class="p">,</span><span class="w">
                 </span><span class="n">top_gs_number</span><span class="o">=</span><span class="m">20</span><span class="p">,</span><span class="n">target_col</span><span class="o">=</span><span class="s1">'RdBu'</span><span class="p">,</span><span class="w">
                 </span><span class="n">left_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in G4'</span><span class="p">,</span><span class="n">right_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in others'</span><span class="p">,</span><span class="w">
                 </span><span class="n">main</span><span class="o">=</span><span class="w"> </span><span class="n">comp_name</span><span class="p">,</span><span class="n">Z_sig_thre</span><span class="o">=</span><span class="m">1.64</span><span class="p">,</span><span class="n">profile_sig_thre</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w">
                 </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/NetBID_GSEA_GS_demo1.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="NetBID_GSEA_GS_demo1.png" alt="NetBID_GSEA_GS_demo1" /></p>

<ul>
  <li>The <code class="highlighter-rouge">target_col</code> has two options, <code class="highlighter-rouge">RdBu</code> and <code class="highlighter-rouge">black</code>. The figure below is showing when <code class="highlighter-rouge">target_col = 'black'</code>.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.GSEA.NetBID.GS</span><span class="p">(</span><span class="n">DE</span><span class="o">=</span><span class="n">DE</span><span class="p">,</span><span class="n">name_col</span><span class="o">=</span><span class="s1">'ID'</span><span class="p">,</span><span class="n">profile_col</span><span class="o">=</span><span class="s1">'t'</span><span class="p">,</span><span class="n">profile_trend</span><span class="o">=</span><span class="s1">'pos2neg'</span><span class="p">,</span><span class="w">
                    </span><span class="n">sig_gs_list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sig_gs</span><span class="o">$</span><span class="n">ID</span><span class="p">,</span><span class="w">
                    </span><span class="n">gs_DA_Z</span><span class="o">=</span><span class="w"> </span><span class="n">DA_gs_bid</span><span class="p">[</span><span class="n">sig_gs</span><span class="o">$</span><span class="n">ID</span><span class="p">,</span><span class="s1">'Z-statistics'</span><span class="p">],</span><span class="w">
                    </span><span class="n">use_gs2gene</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">use_gs2gene</span><span class="p">,</span><span class="w">
                    </span><span class="n">top_gs_number</span><span class="o">=</span><span class="m">20</span><span class="p">,</span><span class="n">target_col</span><span class="o">=</span><span class="s1">'black'</span><span class="p">,</span><span class="w">
                    </span><span class="n">left_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in G4'</span><span class="p">,</span><span class="n">right_annotation</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'high in others'</span><span class="p">,</span><span class="w">
                    </span><span class="n">main</span><span class="o">=</span><span class="w"> </span><span class="n">comp_name</span><span class="p">,</span><span class="n">Z_sig_thre</span><span class="o">=</span><span class="m">1.64</span><span class="p">,</span><span class="n">profile_sig_thre</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w">
                    </span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/NetBID_GSEA_GS_demo2.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="NetBID_GSEA_GS_demo2.png" alt="NetBID_GSEA_GS_demo2" /></p>

<ul>
  <li>For a specific gene set, <code class="highlighter-rouge">draw.GSEA()</code> can be used to display the significance of genes from the DE profile.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Draw GSEA plot for one gene set</span><span class="w">
</span><span class="n">DE_profile</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">DE</span><span class="o">$</span><span class="n">`Z-statistics`</span><span class="p">;</span><span class="w"> </span><span class="nf">names</span><span class="p">(</span><span class="n">DE_profile</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">DE</span><span class="p">)</span><span class="w">
</span><span class="n">use_target_genes</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">DE</span><span class="p">)[</span><span class="n">which</span><span class="p">(</span><span class="n">DE</span><span class="o">$</span><span class="n">ID</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">use_gs2gene</span><span class="p">[[</span><span class="n">sig_gs</span><span class="o">$</span><span class="n">ID</span><span class="p">[</span><span class="m">1</span><span class="p">]]])]</span><span class="w">
</span><span class="n">use_gs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sig_gs</span><span class="o">$</span><span class="n">ID</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="n">draw.GSEA</span><span class="p">(</span><span class="n">rank_profile</span><span class="o">=</span><span class="n">DE_profile</span><span class="p">,</span><span class="n">use_genes</span><span class="o">=</span><span class="n">use_target_genes</span><span class="p">,</span><span class="w">
          </span><span class="n">main</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'GSEA plot for %s'</span><span class="p">,</span><span class="n">use_gs</span><span class="p">),</span><span class="w">
          </span><span class="n">pdf_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/GSEA_GS_each.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
          </span><span class="n">left_annotation</span><span class="o">=</span><span class="s1">'high in G4'</span><span class="p">,</span><span class="n">right_annotation</span><span class="o">=</span><span class="s1">'high in others'</span><span class="p">,</span><span class="w">
          </span><span class="n">annotation</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'P-value: %s'</span><span class="p">,</span><span class="nf">signif</span><span class="p">(</span><span class="n">sig_gs</span><span class="p">[</span><span class="n">use_gs</span><span class="p">,</span><span class="s1">'P.Value'</span><span class="p">],</span><span class="m">2</span><span class="p">)))</span><span class="w">
</span></code></pre></div></div>

<p><img src="GSEA_GS_each.png" alt="GSEA_GS_each" /></p>

<ul>
  <li>For a specific gene set, <code class="highlighter-rouge">draw.categoryValue()</code> can be used to display the activity pattern across all samples.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Draw category plot for one gene set</span><span class="w">
</span><span class="n">use_obs_class</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_obs_label</span><span class="p">(</span><span class="n">phe_info</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">phe_info</span><span class="p">,</span><span class="s1">'subgroup'</span><span class="p">)</span><span class="w">
</span><span class="n">draw.categoryValue</span><span class="p">(</span><span class="n">ac_val</span><span class="o">=</span><span class="n">ac_gs</span><span class="p">[</span><span class="n">use_gs</span><span class="p">,],</span><span class="n">use_obs_class</span><span class="o">=</span><span class="n">use_obs_class</span><span class="p">,</span><span class="w">
                   </span><span class="n">class_order</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'WNT'</span><span class="p">,</span><span class="s1">'SHH'</span><span class="p">,</span><span class="s1">'G4'</span><span class="p">),</span><span class="n">class_srt</span><span class="o">=</span><span class="m">30</span><span class="p">,</span><span class="n">pdf_file</span><span class="o">=</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/categoryValue_GS_demo1.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
                   </span><span class="n">main_ac</span><span class="o">=</span><span class="w"> </span><span class="n">use_gs</span><span class="p">,</span><span class="n">main_cex</span><span class="o">=</span><span class="m">0.8</span><span class="p">,</span><span class="w">
                   </span><span class="n">pre_define</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s1">'WNT'</span><span class="o">=</span><span class="s1">'blue'</span><span class="p">,</span><span class="s1">'SHH'</span><span class="o">=</span><span class="s1">'red'</span><span class="p">,</span><span class="s1">'G4'</span><span class="o">=</span><span class="s1">'green'</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><img src="categoryValue_GS_demo1.png" alt="categoryValue_GS_demo1" /></p>

<h3 id="qiii2-how-to-find-drivers-share-significantly-overlapped-target-genes-">QIII.2: How to find drivers share significantly overlapped target genes ?</h3>

<ul>
  <li>To check the target gene overlapping among drivers, users can use <code class="highlighter-rouge">draw.bubblePlot()</code> in a different way.
Just change the input into ome gene list (from gene set) and a fake conversion table.</li>
</ul>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gs2gene_target</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">[</span><span class="n">driver_list</span><span class="p">]</span><span class="w">
</span><span class="n">gs2gene_target</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lapply</span><span class="p">(</span><span class="n">gs2gene_target</span><span class="p">,</span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="n">x</span><span class="o">$</span><span class="n">target</span><span class="p">)</span><span class="w">
</span><span class="n">transfer_tab_fake</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">from</span><span class="o">=</span><span class="n">transfer_tab</span><span class="p">[,</span><span class="m">1</span><span class="p">],</span><span class="n">to</span><span class="o">=</span><span class="n">transfer_tab</span><span class="p">[,</span><span class="m">1</span><span class="p">],</span><span class="n">gene_biotype</span><span class="o">=</span><span class="n">transfer_tab</span><span class="p">[,</span><span class="m">3</span><span class="p">],</span><span class="n">stringsAsFactors</span><span class="o">=</span><span class="nb">F</span><span class="p">)</span><span class="w">
</span><span class="n">draw.bubblePlot</span><span class="p">(</span><span class="n">driver_list</span><span class="o">=</span><span class="w"> </span><span class="n">driver_list</span><span class="p">,</span><span class="n">show_label</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'gene_label'</span><span class="p">],</span><span class="w">
                </span><span class="n">Z_val</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'Z.%s_DA'</span><span class="p">,</span><span class="n">comp_name</span><span class="p">)],</span><span class="w">
                </span><span class="n">driver_type</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[</span><span class="n">driver_list</span><span class="p">,</span><span class="s1">'gene_biotype'</span><span class="p">],</span><span class="w">
                </span><span class="n">target_list</span><span class="o">=</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">merge.network</span><span class="o">$</span><span class="n">target_list</span><span class="p">,</span><span class="n">transfer2symbol2type</span><span class="o">=</span><span class="n">transfer_tab_fake</span><span class="p">,</span><span class="w">
                </span><span class="n">bg_list</span><span class="o">=</span><span class="n">ms_tab</span><span class="p">[,</span><span class="s1">'geneSymbol'</span><span class="p">],</span><span class="n">gs2gene</span><span class="o">=</span><span class="n">gs2gene_target</span><span class="p">,</span><span class="w">
                </span><span class="n">min_gs_size</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="n">max_gs_size</span><span class="o">=</span><span class="m">1000</span><span class="p">,</span><span class="w">
                </span><span class="n">use_gs</span><span class="o">=</span><span class="s1">'all'</span><span class="p">,</span><span class="w">
                </span><span class="n">top_geneset_number</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="n">top_driver_number</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w">
                </span><span class="n">pdf_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sprintf</span><span class="p">(</span><span class="s1">'%s/bubblePlot_overlap.pdf'</span><span class="p">,</span><span class="n">analysis.par</span><span class="o">$</span><span class="n">out.dir.PLOT</span><span class="p">),</span><span class="w">
                </span><span class="n">main</span><span class="o">=</span><span class="s1">'Bubbleplot for top driver targets'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="bubblePlot_overlap.png" alt="bubblePlot_overlap" /></p>

<hr />

<h3 id="how-to-modify-the-figure-size-created-by-draw-functions-"><em>How to modify the figure size created by <code class="highlighter-rouge">draw.</code> functions ?</em></h3>

<p>NetBID2 has 14 functions start with <code class="highlighter-rouge">draw.</code>. These functions all have one option <code class="highlighter-rouge">pdf_file=</code>.</p>
<ul>
  <li>If it is set with a file path, the function will automatically save the plot as a PDF file without adjusting the figure size.</li>
  <li>If it is set to NULL, the figure will show in a new window without saving to PDF. But user can add <code class="highlighter-rouge">pdf()</code> before the <code class="highlighter-rouge">draw.</code> function, and add <code class="highlighter-rouge">dev.off()</code> after the <code class="highlighter-rouge">draw.</code> function to save it manually. In this way, one can customize the figure size. For details, please check <code class="highlighter-rouge">?pdf</code>.</li>
  <li><code class="highlighter-rouge">cex</code> option in all the <code class="highlighter-rouge">draw.</code> functions are used to adjust the text size, and the PDF figure size will be adjusted based on that.</li>
</ul>

<hr />

:ET